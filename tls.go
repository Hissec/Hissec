package Hissec

import (
	"crypto/tls"
	"crypto/x509"
	"encoding/base64"
	"encoding/pem"
	"fmt"
	"os"
)

func GetTls() *tls.Config {
	pool := x509.NewCertPool()
	caCrt, _ := base64.StdEncoding.DecodeString("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPRENDQWlBQ0NRQzdJTTlRRkEwSmNEQU5CZ2txaGtpRzl3MEJBUXNGQURCZU1Rc3dDUVlEVlFRR0V3SkQKVGpFUE1BMEdBMVVFQ0F3R1UwaEJUbGhKTVEwd0N3WURWUVFIREFSWVNVRk9NUTB3Q3dZRFZRUUtEQVJJUlZKUApNUTh3RFFZRFZRUUxEQVpJU1ZOVFJVTXhEekFOQmdOVkJBTU1CbWhwYzNObFl6QWVGdzB5TURBeE1UY3hOVFF6Ck16bGFGdzB6TURBeE1UUXhOVFF6TXpsYU1GNHhDekFKQmdOVkJBWVRBa05PTVE4d0RRWURWUVFJREFaVFNFRk8KV0VreERUQUxCZ05WQkFjTUJGaEpRVTR4RFRBTEJnTlZCQW9NQkVoRlVrOHhEekFOQmdOVkJBc01Ca2hKVTFORgpRekVQTUEwR0ExVUVBd3dHYUdsemMyVmpNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDCkFRRUF1M2JSZGRndFJIREdFc0ZxNjFvbzJjbTh5QXk0RkFCckRERlVPc0oxSmEyZzFFQTI1U05sckczNWZCakgKOENLOFUwYVI4R0N2bW9zMDE4RWppRVFyL1lrb1hQc0EyeVduNFJlT2NQYTltMDJPV2c1cjJFUTFlRXlmVWtyVwpUNWR6ZXNJUGxZOTVSblJ0T01CZ25BcHhIdTdxUkJDNk9JdGEzUmxzZlRGZ0NMUGF4YWhOdElHaXVkZGpJc2hsClVDYWZ5KzNXT2xsOS9XRnhzTDdCRVAyaDQyOVJQWjJVK2ZDdGovQys2bHN6YmxVeFJnVllIVWZ1aUZOc3gvYUoKckJNNzFYTDRIdkdmRmljYjdmYWYvYlhOSmxFMTF6ZFdCeVVFVWxEcmhiVWNwOXBQRXJ6VnNKbjlxRlNPcTlwegpkWGNqdis5aWk4ZE91cTMrbkt4M1JEQkc2d0lEQVFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ05FaFJLCnY3SThpREdHbEdGNTlvUnF2YjRYY2I4UDhVaXBFSTZGK3JyL25TNGhGNDdZbXl1K0IvcW9Tb3cwbWVJc3NUamsKMUJTWWNMZFJrRWVGZWVLRmVrVmNScDlpZi9DREFRdkpDZG02eGpscVd1YnNUUm5UejUyOFRMOEFwZ2tzbkVMeAo2WkVvMFE3QmpUMGZQMHNPNHNvLzJjQjBBdWJ3blA5b0c2cVMrNWxvTTBraml3SkZNc3lnSUFVeXBFYXEvU3FEClVhelp1UWcrY21iZFQvT1pMeS9DbVJUTHdFS1MybUs2M3dIMlRaM0Z6bUJUVzJGd0NDN3JIVVRhbjVpbTQrSjcKT0E0a0E2NzZMV3NxSUcvc0R3Mjh1ZTM2dCt2UjdxVEcyeG1GTEhMMmxzNEMrbEZqZWYwQkRUZm9GRXYrTjFvVApraHpqL1loQ0dJTjdzcTBkCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=")
	pool.AppendCertsFromPEM(caCrt)
	// 读取私钥文件
	keyBytes, _ := base64.StdEncoding.DecodeString("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpQcm9jLVR5cGU6IDQsRU5DUllQVEVECkRFSy1JbmZvOiBBRVMtMjU2LUNCQyxBQTVGNkY2RDg3MjdGMEI5QUIwODZBMDY4QUE1NEZGRAoKbGQrbVJDMjJFUlhXM1ZBVUZ0WCtKcTNxcjV1cXNZSjg3dVZYUWdxYkVwNUI3cW1WL09SZDU1eS8yQ2tyWUdLNwo5V2FvS0xZZHBhQ3VwNVBxUmRPWjU2RGRsaFpEV2lna3RmakI4SjJEZUs4RlN0ejRoYThBOVJ1UTJZaklta1p0Cnl5cS80N1JuMDRDTUZQUW5UUnBkbHFNWTgxaXJyQ0QyRzd5WXp2NG5aRFQ0aUNzMXFxT1dHbU5wQnJhOFN1SGkKTHF6RTVFc09OWmxrN1JoR2pWRWRIdWV6YXNKdnMxYzEycmNua2RmcDExVXJXZmlSR3FCMm5namhtaHRTSGpHcApJVVlZZmhUUTdUZkh6OUN1NzZGTkpSMTVDSEZhTGlEZ0JYM3ZzQ1hiR3pRT3h4UkNvTGNTS21LM2VFTjFNY1NVCktqZDhVVVE4WjViQmt5ZHNBUHNxMGtoY2JEb05wTnEwYjNRc1VGNnhVeGFyWExrVTdhaFdWdzk0ejliYXhRZmEKSkVRVkhJMk0zOHlXVHc0Tm1BTzl5VWZla1NaUlE5MkNvaHM4a2tMRlppeForMElnbktpOWR5dHNReEkxbklRRwo3dXVaVUV0Q2pPcVU3RVh5VFJ6Qm9HTjNJT1p5NG9uTFFBY1dDQ0F4VmNOelR5aVNVU1BYN0k3NThTU2dGSFozClRrQzVyTlU1NWRrejMxYU5QNHdoL0N1ajh2d21rUzVyREJOMDdtVkREK2JSQk1DaFNFMmRRUHVybndKWjJOL3UKNXY2UUV4Y2pUYW45eUhQY002S2owZXFySVdHSGlNdGs5bWlaSGZjeHd4MS9WRmpwS3V2VEdIWWhXMnhHVksyTgozMlJQRldJSWlBaDVGZVprZk02ZVFjZUw1MkFqQUlTNEtUeEVra0R1VlVlOHdpUjhvZ1I1NkNRVFZmcC9oZWRmCjdNUklkeGc5NHNIaGpVOHR3RytXWUdyL0czMFNsdURwd1NreWF3dG0rN1cvTUVMOEZheU9sM0M4bTZrRk9mVXUKeFlVTmNMM1hmSkQ3Z1piMUpVMHh2QzI4Y1ZRVDJNNHJqdDlVcXNsc1JLOWx2Z0xUaDVUVTFkRFV2WHFYK2orMgpFNk1kdjRBMlprSjVFYkFGa2M2dXcyemk5TVdicGVvbEg0Qk0yd2o2bnhGUkJOQVE5R201NFZZOXRpcEoyRkJuClh0NFVOVGFLZkRFMEEwaUhzQkVrL25KQ08xRmlxYjZGM0l6MWQwK3ZsV01MQzRrRzhhc21ndk02bFFyZ3hUWUgKNldTV2VENHcxQVI4eVo2VVZ4QzB0bFdOQTZwdHRhVFZla2tad1FiVzFiSSs1RVdacXh5amZjcjhzUjByZXBSVApqUGR5UHVINWgwRitaSll5V05ZdmlUUmYxMHN3MllucnZUZS93bTB0TWc2Tmg4ejBxczM4SUVISm0zaFg2Rkw1Cml2QjFJb3Rkd3k0cmIzcjZuTGZJeVFtVGxRaXJ1cHpUa1BrNm1GMERWaE9SSzlOdllzWWg5L2svUHdlR0xyYWgKSnljN2ZRcm91ZTRvUEQrcGpxRmV1Y1BIMGFWWDBFYkFqSVB3L2JZMFBwWFVOVmZrdjJtZWFOeXg1cFcrdWREVQplZHdYUkZLNUpPMGZUb1ROUnNwQTZvdGJFU1A2dGovNkxWYkcwQ2tHVkFmN2h4ekhObkxDSXcxZUI3enZwV1lOCmFocmxlSFoyM3h4c2VwQjVIQ2xFaWhxWnpaeFhjTDhuR1Z5OFFXb2RkS2cxUkxXb2VLSlhvQ1Q4OFVZMzJSaDAKaFpKdkl6djVORW00OW56YzFDZFoxQXRlL0RNYVZlaEhtcUNDbVhGRU5pZUM1N01iYmphZENua1RSem5FYm85TwpzNlRNMXI3WEdMVlVIb0pCWlhLOFFpOHVXUVQ5N3NySnNSelNXTTVsSnhjdnlwWXc0VzUxY21ER3JkdnF4QlRiClkwanVCR0ZCbVVDaWplTGFmME41VldNcDAxN0JQOVQ5UDlPQUlsK2l6dk42OEV5Y2tWQnB2RFdwTXI0UFh4TXAKWjhrcVo1NitkMVQ0c05RdXFLbmJrN0QyWXlhR2IyeHY4Wko1d3Fscm45SDJpTVk3WTAwNmFSakpvdEFKRjhBVwotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==")
	// 把字节流转成PEM结构
	block, rest := pem.Decode(keyBytes)
	if len(rest) > 0 {
		panic("Unable to decode keyBytes")
	}
	// 解密PEM
	der, err := x509.DecryptPEMBlock(block, []byte("hissec"))
	if err != nil {
		panic("Unable to decrypt pem block")
	}
	// 解析出其中的RSA 私钥
	key, err := x509.ParsePKCS1PrivateKey(der)
	if err != nil {
		panic("Unable to parse pem block")
	}
	// 编码成新的PEM 结构
	ckey := pem.EncodeToMemory(
		&pem.Block{
			Type:  "RSA PRIVATE KEY",
			Bytes: x509.MarshalPKCS1PrivateKey(key),
		},
	)
	// 读取证书文件
	cert, _ := base64.StdEncoding.DecodeString("Q2VydGlmaWNhdGU6CiAgICBEYXRhOgogICAgICAgIFZlcnNpb246IDMgKDB4MikKICAgICAgICBTZXJpYWwgTnVtYmVyOiAxICgweDEpCiAgICBTaWduYXR1cmUgQWxnb3JpdGhtOiBzaGEyNTZXaXRoUlNBRW5jcnlwdGlvbgogICAgICAgIElzc3VlcjogQz1DTiwgU1Q9U0hBTlhJLCBMPVhJQU4sIE89SEVSTywgT1U9SElTU0VDLCBDTj1oaXNzZWMKICAgICAgICBWYWxpZGl0eQogICAgICAgICAgICBOb3QgQmVmb3JlOiBKYW4gMTcgMTU6NDM6NDUgMjAyMCBHTVQKICAgICAgICAgICAgTm90IEFmdGVyIDogSmFuIDE2IDE1OjQzOjQ1IDIwMjEgR01UCiAgICAgICAgU3ViamVjdDogQz1DTiwgU1Q9U0hBTlhJLCBPPUhFUk8sIE9VPUhJU1NFQywgQ049aGlzc2VjCiAgICAgICAgU3ViamVjdCBQdWJsaWMgS2V5IEluZm86CiAgICAgICAgICAgIFB1YmxpYyBLZXkgQWxnb3JpdGhtOiByc2FFbmNyeXB0aW9uCiAgICAgICAgICAgICAgICBQdWJsaWMtS2V5OiAoMjA0OCBiaXQpCiAgICAgICAgICAgICAgICBNb2R1bHVzOgogICAgICAgICAgICAgICAgICAgIDAwOmJjOjRkOmNiOjUxOjcxOjMyOmFhOjIxOjhmOjAxOmE3OjMxOjg1OjIwOgogICAgICAgICAgICAgICAgICAgIDU4OmEzOmYzOjJjOjI1OmIyOmY3Ojk1Ojg4OmVjOmU1OmVkOjU4OmU3OmU0OgogICAgICAgICAgICAgICAgICAgIDk1OjUxOjhmOmMwOjRmOmNmOjhhOjc1OmI5OmRhOjM3OjY5OjYzOjVkOjQ4OgogICAgICAgICAgICAgICAgICAgIGIwOjIxOjVkOmQyOjkxOjMxOmEwOjAzOmFiOjRmOjg4OmQyOjEyOjRmOmNiOgogICAgICAgICAgICAgICAgICAgIDkxOmI4OjQ2OmU4OjYyOjY5OmQ2Ojc2OjhjOjIwOmQ4OmYxOmZlOjBmOmU0OgogICAgICAgICAgICAgICAgICAgIDYwOjg5OjcyOjQzOjg1OjY4OjZmOjExOjI2OjRlOmExOjZlOjBiOmE0OmI1OgogICAgICAgICAgICAgICAgICAgIGJlOjUzOjdiOmI0OjA5OmY3OjQxOmU0OjcwOjAwOjllOjE1OjEyOjAyOjliOgogICAgICAgICAgICAgICAgICAgIDY5OjYyOjFjOjlmOjc1OmI5OmJkOmZlOmZkOmVhOjI1OmI4OmQ1OjIxOjc2OgogICAgICAgICAgICAgICAgICAgIGU0OjRmOmU1OjU3OjE2OjlmOmMxOmVlOjEwOjI1OjdmOjk0OjhiOjgxOjA5OgogICAgICAgICAgICAgICAgICAgIDQyOmFmOjU1OmVkOjRmOjg5OjU2OjdjOmZlOjkyOjA2OjIxOjNkOmNkOmFmOgogICAgICAgICAgICAgICAgICAgIDk3OjBhOmVmOjUyOjAyOjQ1OmMxOjk3OjAzOjYxOmQ5OjcxOjgzOjQyOjIzOgogICAgICAgICAgICAgICAgICAgIDM4OmNjOjFjOjNkOjkyOjNjOmQzOjQyOjZhOjFmOmFjOmNmOjIwOjBkOjRiOgogICAgICAgICAgICAgICAgICAgIDBkOmQ4OmUwOmJmOmRhOmVkOjllOjYxOmZhOjEzOjEzOmMwOmMyOjQwOmQwOgogICAgICAgICAgICAgICAgICAgIDI3OmRlOjllOjBiOmQ3OjQwOmFjOjkyOjdiOjMzOmIyOjU5OjZiOjVmOjRhOgogICAgICAgICAgICAgICAgICAgIDFiOmY5OjY4OmE1OjFhOjQ3OjEzOjRkOjJiOjRmOjYxOjcwOjQ3OjI4OjE5OgogICAgICAgICAgICAgICAgICAgIDk2OjI0OjQ5OmViOmY0OmE0OjNjOmVjOmRlOjRmOjEwOjczOjcyOjRmOmFkOgogICAgICAgICAgICAgICAgICAgIDM5OmRlOjViOmQzOmIzOjdiOjkwOmM2OmYzOjFhOmJjOmU1OjE3OjMwOmY3OgogICAgICAgICAgICAgICAgICAgIDc1OmNkCiAgICAgICAgICAgICAgICBFeHBvbmVudDogNjU1MzcgKDB4MTAwMDEpCiAgICAgICAgWDUwOXYzIGV4dGVuc2lvbnM6CiAgICAgICAgICAgIFg1MDl2MyBCYXNpYyBDb25zdHJhaW50czogCiAgICAgICAgICAgICAgICBDQTpGQUxTRQogICAgICAgICAgICBOZXRzY2FwZSBDb21tZW50OiAKICAgICAgICAgICAgICAgIE9wZW5TU0wgR2VuZXJhdGVkIENlcnRpZmljYXRlCiAgICAgICAgICAgIFg1MDl2MyBTdWJqZWN0IEtleSBJZGVudGlmaWVyOiAKICAgICAgICAgICAgICAgIEY5Ojg0OjNCOjY4OkMwOjNCOjlDOkRGOjRGOkYzOjBDOjgzOkU2OjJCOkFGOjBGOkFDOkM5Ojg0OkE5CiAgICAgICAgICAgIFg1MDl2MyBBdXRob3JpdHkgS2V5IElkZW50aWZpZXI6IAogICAgICAgICAgICAgICAgRGlyTmFtZTovQz1DTi9TVD1TSEFOWEkvTD1YSUFOL089SEVSTy9PVT1ISVNTRUMvQ049aGlzc2VjCiAgICAgICAgICAgICAgICBzZXJpYWw6QkI6MjA6Q0Y6NTA6MTQ6MEQ6MDk6NzAKCiAgICBTaWduYXR1cmUgQWxnb3JpdGhtOiBzaGEyNTZXaXRoUlNBRW5jcnlwdGlvbgogICAgICAgICA0Mzo4ZDphYjoxNzpjNzowODoyMTo4ZDo4Njo3NTo0MDo1Mzo5YTpjZjowNjo5ZTpiMTowZToKICAgICAgICAgMGI6MWM6YzY6YjU6ZDA6YzU6MGM6N2I6MGI6MzM6NjY6OWU6ZjE6OWI6ZTE6YjU6NWE6NTU6CiAgICAgICAgIDg3OjExOjcxOjQ4OjQ2OjU4OmNjOmQzOjAxOmYwOmI1OjA2OjY5OjllOmMwOmFlOjdkOjRkOgogICAgICAgICAzMDo2ZDphNzpiYjo2OTo1Zjo5YTpiNDphNDowODo5OToxNTo2YzpjNjoxYzpjMjpmYjo4NToKICAgICAgICAgZDE6Y2I6ZDY6MDU6ZTU6Zjk6ODE6OGI6OTg6YjQ6OTM6OTM6ODU6OGM6NjY6ODA6ZDE6OGY6CiAgICAgICAgIGU3OmUwOjI4OmMyOjQ1OjZmOmE0OjE4OjY0OmUzOmE5OjY4OjYzOmM5OjY3Ojc0OmNlOjQyOgogICAgICAgICBjMDpkNjozZjpiYzpiMTozOTpmNDo4NTo0Mzo1Njo3ZTo3Yjo0MTo0Mjo3YzplMjo1MDpjMToKICAgICAgICAgZDU6YTA6MmQ6Nzg6MTY6OTE6MGY6ZTA6Y2I6ODQ6NTY6M2Q6ODI6N2Q6Nzg6MDg6ODI6NWQ6CiAgICAgICAgIDdiOmVhOmU4OjI0OmFhOjI2OjQyOmM0OjA1OjVkOjNlOjQ1OjVjOmI2OmNiOjI4OmNiOjhkOgogICAgICAgICA0ZTo5ZTo4Zjo5NzpmMDoyMzplZTplMjpkODo5ZDplZjpjNToxZTo0YTo4Mjo1NDo4NzpiNDoKICAgICAgICAgNDE6NTY6NDU6M2Y6NzI6ODc6ZmE6NTY6YmY6OGM6YmY6Mjg6MWI6NGI6MTg6MTc6Njg6NDA6CiAgICAgICAgIDU3OjE1OjVkOmFlOjU2OjU5OjBhOjRhOmYzOjVkOjAxOmM1OjFiOmI0OjNkOjk3OmVlOjk0OgogICAgICAgICAwZDozMzoyNzozMDozNTo5ZDo3ZDoyMToyNjplNzo2ZjpmYTphYzoxZTpiZjo4Nzo0ZDo5ZDoKICAgICAgICAgYWU6NjA6YzU6NzA6MGI6YWM6Mjc6NmU6NTU6YWI6Y2I6NDc6MGI6YTQ6MDE6YzA6Y2U6ZDM6CiAgICAgICAgIGE3OjdjOmRhOjY4Ci0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlEL2pDQ0F1YWdBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUXNGQURCZU1Rc3dDUVlEVlFRR0V3SkRUakVQCk1BMEdBMVVFQ0F3R1UwaEJUbGhKTVEwd0N3WURWUVFIREFSWVNVRk9NUTB3Q3dZRFZRUUtEQVJJUlZKUE1ROHcKRFFZRFZRUUxEQVpJU1ZOVFJVTXhEekFOQmdOVkJBTU1CbWhwYzNObFl6QWVGdzB5TURBeE1UY3hOVFF6TkRWYQpGdzB5TVRBeE1UWXhOVFF6TkRWYU1FOHhDekFKQmdOVkJBWVRBa05PTVE4d0RRWURWUVFJREFaVFNFRk9XRWt4CkRUQUxCZ05WQkFvTUJFaEZVazh4RHpBTkJnTlZCQXNNQmtoSlUxTkZRekVQTUEwR0ExVUVBd3dHYUdsemMyVmoKTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF2RTNMVVhFeXFpR1BBYWN4aFNCWQpvL01zSmJMM2xZanM1ZTFZNStTVlVZL0FUOCtLZGJuYU4ybGpYVWl3SVYzU2tUR2dBNnRQaU5JU1Q4dVJ1RWJvClltbldkb3dnMlBIK0QrUmdpWEpEaFdodkVTWk9vVzRMcExXK1UzdTBDZmRCNUhBQW5oVVNBcHRwWWh5ZmRibTkKL3YzcUpialZJWGJrVCtWWEZwL0I3aEFsZjVTTGdRbENyMVh0VDRsV2ZQNlNCaUU5emErWEN1OVNBa1hCbHdOaAoyWEdEUWlNNHpCdzlranpUUW1vZnJNOGdEVXNOMk9DLzJ1MmVZZm9URThEQ1FOQW4zcDRMMTBDc2tuc3pzbGxyClgwb2IrV2lsR2tjVFRTdFBZWEJIS0JtV0pFbnI5S1E4N041UEVITnlUNjA1M2x2VHMzdVF4dk1hdk9VWE1QZDEKelFJREFRQUJvNEhWTUlIU01Ba0dBMVVkRXdRQ01BQXdMQVlKWUlaSUFZYjRRZ0VOQkI4V0hVOXdaVzVUVTB3ZwpSMlZ1WlhKaGRHVmtJRU5sY25ScFptbGpZWFJsTUIwR0ExVWREZ1FXQkJUNWhEdG93RHVjMzAvekRJUG1LNjhQCnJNbUVxVEI0QmdOVkhTTUVjVEJ2b1dLa1lEQmVNUXN3Q1FZRFZRUUdFd0pEVGpFUE1BMEdBMVVFQ0F3R1UwaEIKVGxoSk1RMHdDd1lEVlFRSERBUllTVUZPTVEwd0N3WURWUVFLREFSSVJWSlBNUTh3RFFZRFZRUUxEQVpJU1ZOVApSVU14RHpBTkJnTlZCQU1NQm1ocGMzTmxZNElKQUxzZ3oxQVVEUWx3TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQkRqYXNYeHdnaGpZWjFRRk9hendhZXNRNExITWExME1VTWV3c3pacDd4bStHMVdsV0hFWEZJUmxqTTB3SHcKdFFacG5zQ3VmVTB3YmFlN2FWK2F0S1FJbVJWc3hoekMrNFhSeTlZRjVmbUJpNWkwazVPRmpHYUEwWS9uNENqQwpSVytrR0dUanFXaGp5V2QwemtMQTFqKzhzVG4waFVOV2ZudEJRbnppVU1IVm9DMTRGcEVQNE11RVZqMkNmWGdJCmdsMTc2dWdrcWlaQ3hBVmRQa1ZjdHNzb3k0MU9ubytYOENQdTR0aWQ3OFVlU29KVWg3UkJWa1UvY29mNlZyK00KdnlnYlN4Z1hhRUJYRlYydVZsa0tTdk5kQWNVYnREMlg3cFFOTXljd05aMTlJU2JuYi9xc0hyK0hUWjJ1WU1WdwpDNnduYmxXcnkwY0xwQUhBenRPbmZOcG8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==")
	// 生成密钥对
	crt, err := tls.X509KeyPair(cert, ckey)

	//crt, err := tls.X509KeyPair(cert, ckey)
	if err != nil {
		fmt.Println(err)
		os.Exit(0)
	}
	tlsConfig := &tls.Config{}
	tlsConfig.MinVersion = tls.VersionTLS13
	tlsConfig.RootCAs = pool
	tlsConfig.Certificates = []tls.Certificate{crt}
	tlsConfig.InsecureSkipVerify = true
	return tlsConfig
}
